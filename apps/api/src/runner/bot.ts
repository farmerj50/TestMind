import OpenAI from "openai";
import { Octokit } from "@octokit/rest";
import { createAppAuth } from "@octokit/auth-app";
import fs from "node:fs/promises";
import { exec as cpExec } from "node:child_process";
import { promisify } from "node:util";
import { generateAndWrite } from "../../src/testmind/service.js";
import path from "node:path";

const exec = promisify(cpExec);

async function getOctokit(): Promise<Octokit> {
  const {
    GITHUB_TOKEN,
    GITHUB_APP_ID,
    GITHUB_APP_INSTALLATION_ID,
    GITHUB_APP_PRIVATE_KEY_BASE64,
  } = process.env;

  if (GITHUB_APP_ID && GITHUB_APP_INSTALLATION_ID && GITHUB_APP_PRIVATE_KEY_BASE64) {
    const privateKey = Buffer.from(GITHUB_APP_PRIVATE_KEY_BASE64, "base64").toString("utf8");
    const auth = createAppAuth({
      appId: Number(GITHUB_APP_ID),
      privateKey,
      installationId: Number(GITHUB_APP_INSTALLATION_ID),
    });
    const { token } = await auth({ type: "installation" });
    return new Octokit({ auth: token });
  }

  if (!GITHUB_TOKEN) throw new Error("No GitHub auth found (set GITHUB_TOKEN or App creds).");
  return new Octokit({ auth: GITHUB_TOKEN });
}

async function comment(octokit: Octokit, repoRef: { owner: string; repo: string }, issue_number: number, body: string) {
  await octokit.issues.createComment({ ...repoRef, issue_number, body });
}

async function main() {
  const {
    GITHUB_REPOSITORY = "",
    GITHUB_EVENT_NAME = "",
    GITHUB_EVENT_PATH = "",
    OPENAI_API_KEY = "",
  } = process.env;

  if (!GITHUB_REPOSITORY) throw new Error("GITHUB_REPOSITORY missing");
  if (!GITHUB_EVENT_PATH) throw new Error("GITHUB_EVENT_PATH missing");
  if (!OPENAI_API_KEY) throw new Error("OPENAI_API_KEY missing");

  const [owner, repo] = GITHUB_REPOSITORY.split("/");
  const payload = JSON.parse(await fs.readFile(GITHUB_EVENT_PATH, "utf8"));
  const repoRef = { owner, repo };
  const octokit = await getOctokit();

  // Determine PR & command
  let prNumber: number | undefined;
  let userPrompt = "plan+gen+run";

  if (GITHUB_EVENT_NAME === "pull_request") {
    prNumber = payload.pull_request?.number;
  } else if (GITHUB_EVENT_NAME === "issue_comment") {
    const body: string = payload.comment?.body || "";
    if (!body.trim().startsWith("/testmind")) return; // ignore other comments
    prNumber = payload.issue?.number;
    userPrompt = body.replace("/testmind", "").trim() || userPrompt;
  }
  if (!prNumber) return;

  await comment(octokit, repoRef, prNumber, "ü§ñ TestMind Agent starting‚Ä¶");

  // Quick repo ‚Äúscan‚Äù
  let fileCount = 0;
  try {
    const { stdout } = await exec("git ls-files | wc -l");
    fileCount = Number(stdout.trim()) || 0;
  } catch {
    // ignore
  }

  // Plan via OpenAI chat
  const openai = new OpenAI({ apiKey: OPENAI_API_KEY });
  const planMsg = await openai.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [
      { role: "system", content: "You are TestMind. Produce a prioritized, concise E2E plan (routes + key flows) in markdown bullets." },
      { role: "user", content: `Repo has ~${fileCount} tracked files. Command: ${userPrompt}.` },
    ],
  });
  const plan = planMsg.choices[0]?.message?.content ?? "(no plan)";

  // Generate stub (replace with your generator hookup)
  await fs.mkdir("testmind-generated", { recursive: true });
  await fs.writeFile("testmind-generated/README.md", "# Generated by TestMind Agent\n", "utf8");
  
  

await generateAndWrite({
  repoPath: process.cwd(),
  outRoot: path.resolve("testmind-generated"),
  baseUrl: process.env.TEST_BASE_URL ?? "http://localhost:3000",
  adapterId: "playwright-ts",
  options: {
    maxRoutes: 25,        // << move it here
    // add other knobs if you have them, e.g. includeAuthFlows: true
  },
});


  

  // Run Playwright (if configured)
  let summary = "";
  try {
    await exec("pnpm playwright test --reporter=list");
    summary = "‚úÖ All tests passed.";
  } catch {
    summary = "‚ùå Some tests failed. Check the report/artifacts.";
  }

  await comment(
    octokit,
    repoRef,
    prNumber,
    `### TestMind Agent Result\n${summary}\n\n**Plan:**\n${plan}`
  );
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
