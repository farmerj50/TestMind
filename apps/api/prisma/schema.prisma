// apps/api/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TestPriority {
  low
  medium
  high
}

enum TestCaseStatus {
  draft
  active
  archived
}

enum PlanTier {
  free
  pro
  enterprise
}

enum TestResultStatus {
  passed
  failed
  skipped
  error
}

enum TestRunStatus {
  queued
  running
  succeeded
  failed
}

model User {
  id        String    @id
  plan      PlanTier  @default(free)
  projects  Project[]
  createdAt DateTime  @default(now())
}

model Project {
  id        String   @id @default(cuid())
  name      String
  repoUrl   String
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id])
  plan      PlanTier @default(free)
  createdAt DateTime @default(now())

  testRuns TestRun[]
  suites   TestSuite[]
  cases    TestCase[]
}

model GitAccount {
  id        String   @id @default(cuid())
  provider  String   @default("github")
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, userId])
  @@index([userId])
}

model TestRun {
  id         String        @id @default(cuid())
  projectId  String
  project    Project       @relation(fields: [projectId], references: [id])
  status     TestRunStatus @default(queued)
  summary    String?
  error      String?
  createdAt  DateTime      @default(now())
  startedAt  DateTime?
  finishedAt DateTime?
  issueUrl   String?

  results TestResult[]

  @@index([projectId, createdAt])
}

model TestSuite {
  id        String      @id @default(cuid())
  projectId String
  project   Project     @relation(fields: [projectId], references: [id])
  name      String
  parentId  String?
  parent    TestSuite?  @relation("SuiteChildren", fields: [parentId], references: [id])
  children  TestSuite[] @relation("SuiteChildren")
  order     Int         @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  cases TestCase[]

  @@index([projectId, parentId, order])
}

model TestCase {
  id        String         @id @default(cuid())
  projectId String
  project   Project        @relation(fields: [projectId], references: [id])
  suiteId   String?
  suite     TestSuite?     @relation(fields: [suiteId], references: [id])
  key       String         @default(cuid())
  title     String
  priority  TestPriority   @default(medium)
  status    TestCaseStatus @default(active)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  results TestResult[]

  @@unique([projectId, key])
  @@index([projectId, suiteId])
}

model TestResult {
  id    String  @id @default(cuid())
  runId String
  run   TestRun @relation(fields: [runId], references: [id])

  testCaseId String
  testCase   TestCase @relation(fields: [testCaseId], references: [id])

  status     TestResultStatus
  durationMs Int?
  message    String?
  createdAt  DateTime         @default(now())

  @@index([runId, testCaseId])
}
