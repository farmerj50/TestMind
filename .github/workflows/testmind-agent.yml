name: testmind-agent

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      target_pr:
        description: "PR number to run against (e.g., 1)"
        required: true
        type: string
      command:
        description: "Agent command (e.g., plan+gen or plan+gen+run)"
        required: false
        default: "plan+gen"
        type: string

jobs:
  run-agent:
    runs-on: [self-hosted]   # keep your self-hosted runner
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      # ---- pnpm / corepack ----
      - name: Enable Corepack (pnpm) [Windows]
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          corepack enable
          corepack prepare pnpm@9 --activate
          pnpm -v

      - name: Enable Corepack (pnpm) [Unix]
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euxo pipefail
          corepack enable
          corepack prepare pnpm@9 --activate
          pnpm -v

      - name: Install deps [Windows]
        if: runner.os == 'Windows'
        shell: powershell
        run: pnpm i --frozen-lockfile

      - name: Install deps [Unix]
        if: runner.os != 'Windows'
        shell: bash
        run: pnpm i --frozen-lockfile

      # For manual dispatch only
      - name: Prepare event payload (manual only) [Windows]
        if: github.event_name == 'workflow_dispatch' && runner.os == 'Windows'
        shell: powershell
        run: |
          $json = '{ "issue": { "number": ' + $env:TARGET_PR + ' }, "comment": { "body": "/testmind ' + $env:CMD + '" } }'
          Set-Content -Path event.json -Value $json
          "GITHUB_EVENT_NAME=issue_comment" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding ascii
          "GITHUB_EVENT_PATH=$env:GITHUB_WORKSPACE\event.json" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding ascii
        env:
          TARGET_PR: ${{ inputs.target_pr }}
          CMD: ${{ inputs.command }}

      - name: Prepare event payload (manual only) [Unix]
        if: github.event_name == 'workflow_dispatch' && runner.os != 'Windows'
        shell: bash
        run: |
          printf '{ "issue": { "number": %s }, "comment": { "body": "/testmind %s" } }' "$TARGET_PR" "$CMD" > event.json
          echo "GITHUB_EVENT_NAME=issue_comment" >> "$GITHUB_ENV"
          echo "GITHUB_EVENT_PATH=$GITHUB_WORKSPACE/event.json" >> "$GITHUB_ENV"
        env:
          TARGET_PR: ${{ inputs.target_pr }}
          CMD: ${{ inputs.command }}

      # ---- Run your agent (generates specs) ----
      - name: Run TestMind Agent (local URL) [Windows]
        if: runner.os == 'Windows'
        shell: powershell
        env:
          CI: true
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEST_BASE_URL: "http://localhost:5173"
          RUN_TESTS: "true"
        run: pnpm tsx apps/api/src/runner/bot.ts

      - name: Run TestMind Agent (local URL) [Unix]
        if: runner.os != 'Windows'
        shell: bash
        env:
          CI: true
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEST_BASE_URL: "http://localhost:5173"
          RUN_TESTS: "true"
        run: pnpm tsx apps/api/src/runner/bot.ts

      # ---- Playwright runner: install ONE version locally and use it ----
      # Use the same major/minor as the core 'playwright' already in node_modules (logs showed 1.56.0).
      - name: Add @playwright/test to workspace [Windows]
        if: runner.os == 'Windows'
        shell: powershell
        run: pnpm add -D @playwright/test@1.56.0

      - name: Add @playwright/test to workspace [Unix]
        if: runner.os != 'Windows'
        shell: bash
        run: pnpm add -D @playwright/test@1.56.0

      - name: Install Playwright browsers (local) [Windows]
        if: runner.os == 'Windows'
        shell: powershell
        run: pnpm exec playwright install --with-deps

      - name: Install Playwright browsers (local) [Unix]
        if: runner.os != 'Windows'
        shell: bash
        run: pnpm exec playwright install --with-deps

      # Minimal CI config to point at generated tests and set baseURL
      - name: Create CI Playwright config [Windows]
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $cfg = @"
          import { defineConfig } from '@playwright/test';
          export default defineConfig({
            testDir: '.',
            projects: [
              { name: 'gen-root', testDir: './testmind-generated' },
              { name: 'gen-api',  testDir: './apps/api/testmind-generated/playwright-ts' },
            ],
            reporter: 'html',
            use: { baseURL: process.env.TEST_BASE_URL || 'http://localhost:5173' },
          });
          "@
          Set-Content -Path tm-ci.playwright.config.ts -Value $cfg

      - name: Create CI Playwright config [Unix]
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cat > tm-ci.playwright.config.ts <<'EOF'
          import { defineConfig } from '@playwright/test';
          export default defineConfig({
            testDir: '.',
            projects: [
              { name: 'gen-root', testDir: './testmind-generated' },
              { name: 'gen-api',  testDir: './apps/api/testmind-generated/playwright-ts' },
            ],
            reporter: 'html',
            use: { baseURL: process.env.TEST_BASE_URL || 'http://localhost:5173' },
          });
          EOF

      # Run tests with the local runner (prevents "Requiring @playwright/test second time")
      - name: Run Playwright tests with CI config [Windows]
        if: runner.os == 'Windows'
        shell: powershell
        continue-on-error: true
        run: pnpm exec playwright test -c tm-ci.playwright.config.ts

      - name: Run Playwright tests with CI config [Unix]
        if: runner.os != 'Windows'
        shell: bash
        continue-on-error: true
        run: pnpm exec playwright test -c tm-ci.playwright.config.ts

      # ---- Artifacts ----
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          if-no-files-found: error

      - name: Upload Playwright traces (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: test-results/**/*trace*.zip
          if-no-files-found: ignore
