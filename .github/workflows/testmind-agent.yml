name: testmind-agent

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      target_pr:
        description: "PR number to run against (e.g., 1)"
        required: true
        type: string
      command:
        description: "Agent command (e.g., plan+gen or plan+gen+run)"
        required: false
        default: "plan+gen"
        type: string

jobs:
  run-agent:
    # Your self-hosted runner
    runs-on: [self-hosted] # add labels if you have them, e.g. [self-hosted, Windows, X64]
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Enable Corepack (pnpm)
        run: |
          corepack enable
          corepack prepare pnpm@9 --activate
          pnpm -v

      - name: Install deps
        run: pnpm i --frozen-lockfile

      # Only needed for manual trigger so bot.ts can read a PR-like payload
      - name: Prepare event payload (manual only)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        run: |
          echo '{ "issue": { "number": '"${TARGET_PR}"' }, "comment": { "body": "/testmind '"${CMD}"'" } }' > event.json
          echo "GITHUB_EVENT_NAME=issue_comment" >> $GITHUB_ENV
          echo "GITHUB_EVENT_PATH=$GITHUB_WORKSPACE/event.json" >> $GITHUB_ENV
        env:
          TARGET_PR: ${{ inputs.target_pr }}
          CMD: ${{ inputs.command }}

      - name: Run TestMind Agent (local URL)
        env:
          CI: true
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEST_BASE_URL: "http://localhost:5173"  # your local app URL
          RUN_TESTS: "true"                       # agent may still only generate; we run tests explicitly below
        run: pnpm tsx apps/api/src/runner/bot.ts

      - name: Install Playwright browsers
        run: pnpm exec playwright install

      # Run tests to actually produce the HTML report folder.
      # This is PowerShell for best compatibility with Windows self-hosted runners.
      - name: Run Playwright tests (generated)
        shell: pwsh
        continue-on-error: true   # keep going so we can upload the report even on failures
        run: |
          if (Test-Path "testmind-generated\playwright.config.ts") {
            pnpm exec playwright test -c testmind-generated\playwright.config.ts --reporter=html
          } elseif (Test-Path "testmind-generated") {
            pnpm exec playwright test testmind-generated --reporter=html
          } else {
            pnpm exec playwright test --reporter=html
          }

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          if-no-files-found: error  # ensures we notice if no report was generated

      # Optional: upload Playwright traces (if you turned on tracing in your config)
      - name: Upload Playwright traces (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: test-results/**/*trace*.zip
          if-no-files-found: ignore
